# üöÄ Script d'Activation Rapide - Talk Kin (Windows)
# Active toutes les fonctionnalit√©s et d√©marre l'application

[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingWriteHost', '')]
[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidGlobalVars', '')]
param()

Write-Information "üöÄ Activation compl√®te de Talk Kin..." -InformationAction Continue
Write-Information "==================================" -InformationAction Continue

# V√©rifier Node.js
try {
    $nodeVersion = node --version
    Write-Information "‚úÖ Node.js d√©tect√©: $nodeVersion" -InformationAction Continue
} catch {
    Write-Error "‚ùå Node.js n'est pas install√©"
    exit 1
}

# V√©rifier npm
try {
    $npmVersion = npm --version
    Write-Information "‚úÖ npm d√©tect√©: $npmVersion" -InformationAction Continue
} catch {
    Write-Error "‚ùå npm n'est pas install√©"
    exit 1
}

# Installer les d√©pendances si n√©cessaire
if (!(Test-Path "node_modules")) {
    Write-Information "üì¶ Installation des d√©pendances..." -InformationAction Continue
    npm install
}

# D√©marrer le serveur API
Write-Information "üåê D√©marrage du serveur API..." -InformationAction Continue
$script:apiProcess = Start-Process -FilePath "node" -ArgumentList "api-server-simple.js" -PassThru -NoNewWindow
Write-Information "‚úÖ Serveur API d√©marr√© (PID: $($script:apiProcess.Id))" -InformationAction Continue

# Attendre que le serveur soit pr√™t
Start-Sleep -Seconds 3

# Test de sant√© de l'API
Write-Information "üè• Test de sant√© de l'API..." -InformationAction Continue
try {
    $healthResponse = Invoke-RestMethod -Uri "http://localhost:3000/api/health" -Method Get -TimeoutSec 5
    if ($healthResponse -and $healthResponse.status) {
        Write-Information "‚úÖ API op√©rationnelle - Status: $($healthResponse.status)" -InformationAction Continue
    } else {
        Write-Information "‚úÖ API op√©rationnelle - R√©ponse re√ßue" -InformationAction Continue
    }
} catch {
    Write-Warning "‚ö†Ô∏è API non accessible - continuons quand m√™me"
}

# D√©marrer l'application Expo
Write-Information "üì± D√©marrage de l'application Expo..." -InformationAction Continue
$script:expoProcess = Start-Process -FilePath "npx" -ArgumentList "expo", "start", "--web" -PassThru -NoNewWindow
Write-Information "‚úÖ Expo d√©marr√© (PID: $($script:expoProcess.Id))" -InformationAction Continue

# Attendre le d√©marrage d'Expo
Start-Sleep -Seconds 5

# Test d'activation des fonctionnalit√©s
Write-Information "‚ö° Test d'activation des fonctionnalit√©s..." -InformationAction Continue
if (Test-Path "test-activation-complete.js") {
    node test-activation-complete.js
} else {
    Write-Warning "‚ö†Ô∏è Fichier de test non trouv√© - continuons"
}

Write-Information "" -InformationAction Continue
Write-Information "üéâ ACTIVATION COMPL√àTE TERMIN√âE !" -InformationAction Continue
Write-Information "==================================" -InformationAction Continue
Write-Information "" -InformationAction Continue
Write-Information "üì± Application web: http://localhost:8081" -InformationAction Continue
Write-Information "üåê API Serveur: http://localhost:3000" -InformationAction Continue
Write-Information "üìÑ Documentation: ACTIVATION_GLOBALE_COMPLETE.md" -InformationAction Continue
Write-Information "" -InformationAction Continue
Write-Information "üîß Fonctionnalit√©s actives:" -InformationAction Continue
Write-Information "   üé§ Reconnaissance vocale" -InformationAction Continue
Write-Information "   üó£Ô∏è Synth√®se vocale" -InformationAction Continue
Write-Information "   üåç Traduction multi-langues" -InformationAction Continue
Write-Information "   üöÄ IA avanc√©e" -InformationAction Continue
Write-Information "   üéØ Extensions linguistiques" -InformationAction Continue
Write-Information "   ‚ö° 12 fonctionnalit√©s premium" -InformationAction Continue
Write-Information "" -InformationAction Continue
Write-Information "üìñ Guide d'utilisation:" -InformationAction Continue
Write-Information "   1. Ouvrez http://localhost:8081" -InformationAction Continue
Write-Information "   2. Naviguez vers 'Activation Globale'" -InformationAction Continue
Write-Information "   3. Testez les fonctionnalit√©s" -InformationAction Continue
Write-Information "   4. Profitez de Talk Kin !" -InformationAction Continue
Write-Information "" -InformationAction Continue
Write-Information "üõë Pour arr√™ter: Ctrl+C ou fermez cette fen√™tre" -InformationAction Continue

# Fonction de nettoyage
function Stop-TalkKinService {
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidGlobalVars', '')]
    param()
    
    Write-Information "" -InformationAction Continue
    Write-Information "üõë Arr√™t des services..." -InformationAction Continue
    try {
        if ($script:apiProcess -and !$script:apiProcess.HasExited) {
            Stop-Process -Id $script:apiProcess.Id -Force -ErrorAction SilentlyContinue
            Write-Information "‚úÖ Serveur API arr√™t√©" -InformationAction Continue
        }
        if ($script:expoProcess -and !$script:expoProcess.HasExited) {
            Stop-Process -Id $script:expoProcess.Id -Force -ErrorAction SilentlyContinue
            Write-Information "‚úÖ Application Expo arr√™t√©e" -InformationAction Continue
        }
        Write-Information "‚úÖ Tous les services arr√™t√©s" -InformationAction Continue
    } catch {
        Write-Warning "‚ö†Ô∏è Certains processus n'ont pas pu √™tre arr√™t√©s"
    }
}

# Capturer Ctrl+C
Register-EngineEvent PowerShell.Exiting -Action { Stop-TalkKinService }

# Garder le script en vie
Write-Information "‚ñ∂Ô∏è Services en cours d'ex√©cution... (Ctrl+C pour arr√™ter)" -InformationAction Continue
try {
    while ($true) {
        Start-Sleep -Seconds 1
        
        # V√©rifier si les processus sont toujours en vie
        if (($script:apiProcess -and $script:apiProcess.HasExited) -or 
            ($script:expoProcess -and $script:expoProcess.HasExited)) {
            Write-Warning "‚ö†Ô∏è Un des services s'est arr√™t√©"
            break
        }
    }
} catch [System.Management.Automation.PipelineStoppedException] {
    # Ctrl+C intercept√©
    Write-Warning "‚ö†Ô∏è Arr√™t demand√© par l'utilisateur"
} finally {
    Stop-TalkKinService
}
