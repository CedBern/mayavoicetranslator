/**
 * Script de test pour valider la traduction bidirectionnelle
 * 
 * Ce script teste que :
 * 1. Les dictionnaires bidirectionnels sont bien g√©n√©r√©s
 * 2. Toutes les langues peuvent √™tre sources et destinations
 * 3. Les traductions inverses fonctionnent correctement
 */

// Simulation du dictionnaire de base comme dans le composant
const baseDictionary = {
  'fr_yua': {
    'bonjour': 'ba\'ax ka wa\'alik',
    'merci': 'n√≠ib √≥olal',
    'au revoir': 'h√°ach winikech',
    'famille': 'otoch',
    'eau': 'ja\'',
    'maison': 'naj'
  },
  'fr_qu': {
    'bonjour': 'rimaykullayki',
    'merci': 'a√±ay',
    'au revoir': 'tupananchiskama',
    'famille': 'ayllu',
    'eau': 'unu',
    'maison': 'wasi'
  },
  'fr_gn': {
    'bonjour': 'mba\'√©ichapa',
    'merci': 'aguyje',
    'au revoir': 'jajoecha peve',
    'famille': 't√©ta',
    'eau': 'y',
    'maison': '√≥ga'
  }
};

// G√©n√©ration des dictionnaires inverses
const generateReverseDictionary = () => {
  const reversedDict = {};
  
  Object.keys(baseDictionary).forEach(key => {
    const [from, to] = key.split('_');
    const reverseKey = `${to}_${from}`;
    
    reversedDict[reverseKey] = {};
    Object.entries(baseDictionary[key]).forEach(([source, target]) => {
      reversedDict[reverseKey][target] = source;
    });
  });
  
  return reversedDict;
};

// Test du syst√®me
const fullDictionary = { ...baseDictionary, ...generateReverseDictionary() };

console.log('üîÑ Test de traduction bidirectionnelle\n');

// Test 1: V√©rifier les directions disponibles
console.log('üìä Directions de traduction disponibles:');
Object.keys(fullDictionary).forEach(key => {
  const [from, to] = key.split('_');
  const count = Object.keys(fullDictionary[key]).length;
  console.log(`  ${from} ‚Üí ${to}: ${count} traductions`);
});

console.log('\nüîÑ Tests de traduction:');

// Test 2: Traductions bidirectionnelles
const testCases = [
  { from: 'fr', to: 'yua', text: 'bonjour' },
  { from: 'yua', to: 'fr', text: 'ba\'ax ka wa\'alik' },
  { from: 'fr', to: 'qu', text: 'merci' },
  { from: 'qu', to: 'fr', text: 'a√±ay' },
  { from: 'fr', to: 'gn', text: 'famille' },
  { from: 'gn', to: 'fr', text: 't√©ta' }
];

testCases.forEach(test => {
  const key = `${test.from}_${test.to}`;
  const translation = fullDictionary[key]?.[test.text.toLowerCase()];
  const status = translation ? '‚úÖ' : '‚ùå';
  
  console.log(`${status} ${test.from} ‚Üí ${test.to}: "${test.text}" ‚Üí "${translation || 'NON TROUV√â'}"`);
});

console.log('\nüìà R√©sum√©:');
console.log(`  ‚Ä¢ Langues sources: ${new Set(Object.keys(fullDictionary).map(k => k.split('_')[0])).size}`);
console.log(`  ‚Ä¢ Langues cibles: ${new Set(Object.keys(fullDictionary).map(k => k.split('_')[1])).size}`);
console.log(`  ‚Ä¢ Paires de traduction: ${Object.keys(fullDictionary).length}`);
console.log(`  ‚Ä¢ Total de traductions: ${Object.values(fullDictionary).reduce((sum, dict) => sum + Object.keys(dict).length, 0)}`);

// Test 3: V√©rifier la bidirectionnalit√©
console.log('\nüîÄ V√©rification de la bidirectionnalit√©:');
['fr_yua', 'fr_qu', 'fr_gn'].forEach(originalKey => {
  const [from, to] = originalKey.split('_');
  const reverseKey = `${to}_${from}`;
  
  const hasOriginal = !!fullDictionary[originalKey];
  const hasReverse = !!fullDictionary[reverseKey];
  
  console.log(`  ${from} ‚Üî ${to}: ${hasOriginal && hasReverse ? '‚úÖ Bidirectionnel' : '‚ö†Ô∏è Unidirectionnel'}`);
});

console.log('\n‚ú® Test termin√© - La traduction bidirectionnelle est fonctionnelle !');
