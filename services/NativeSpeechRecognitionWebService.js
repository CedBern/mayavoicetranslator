/**
 * üé§ Service de Reconnaissance Vocale Avanc√©
 * Reconnaissance vocale native avec support des langues indig√®nes
 */

class NativeSpeechRecognitionWebService {
  constructor() {
    this.isInitialized = false;
    this.isListening = false;
    this.recognition = null;
    this.currentLanguage = 'fr-FR';
    
    // Mapping des langues support√©es
    this.languageMapping = {
      'fr': 'fr-FR',
      'es': 'es-ES',
      'en': 'en-US',
      'yua': 'es-MX', // Fallback vers espagnol mexicain
      'qu': 'es-PE',  // Fallback vers espagnol p√©ruvien
      'gn': 'es-PY',  // Fallback vers espagnol paraguayen
      'nah': 'es-MX', // Fallback vers espagnol mexicain
      'ay': 'es-BO'   // Fallback vers espagnol bolivien
    };

    this.callbacks = {
      onResult: null,
      onError: null,
      onStart: null,
      onEnd: null
    };
  }

  /**
   * Initialise le service de reconnaissance vocale
   */
  async initialize() {
    try {
      // V√©rifier si Speech Recognition est disponible
      if (typeof window === 'undefined') {
        console.log('üé§ Service en mode serveur - reconnaissance simul√©e');
        this.isInitialized = true;
        return true;
      }

      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      
      if (!SpeechRecognition) {
        console.warn('‚ö†Ô∏è Reconnaissance vocale non support√©e par ce navigateur');
        return false;
      }

      this.recognition = new SpeechRecognition();
      this.setupRecognition();
      this.isInitialized = true;
      
      console.log('‚úÖ Service de reconnaissance vocale initialis√©');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur initialisation reconnaissance vocale:', error);
      return false;
    }
  }

  /**
   * Configure les param√®tres de reconnaissance
   */
  setupRecognition() {
    if (!this.recognition) return;

    this.recognition.continuous = false;
    this.recognition.interimResults = false;
    this.recognition.maxAlternatives = 1;
    this.recognition.lang = this.currentLanguage;

    this.recognition.onstart = () => {
      console.log('üé§ Reconnaissance vocale d√©marr√©e');
      this.isListening = true;
      if (this.callbacks.onStart) {
        this.callbacks.onStart();
      }
    };

    this.recognition.onresult = (event) => {
      const result = event.results[0][0];
      const transcript = result.transcript;
      const confidence = result.confidence;
      
      console.log(`üó£Ô∏è Reconnu: "${transcript}" (confiance: ${Math.round(confidence * 100)}%)`);
      
      if (this.callbacks.onResult) {
        this.callbacks.onResult({
          transcript: transcript,
          confidence: confidence,
          language: this.currentLanguage,
          timestamp: new Date().toISOString()
        });
      }
    };

    this.recognition.onerror = (event) => {
      console.error('‚ùå Erreur reconnaissance vocale:', event.error);
      this.isListening = false;
      
      if (this.callbacks.onError) {
        this.callbacks.onError({
          error: event.error,
          message: this.getErrorMessage(event.error)
        });
      }
    };

    this.recognition.onend = () => {
      console.log('üõë Reconnaissance vocale termin√©e');
      this.isListening = false;
      
      if (this.callbacks.onEnd) {
        this.callbacks.onEnd();
      }
    };
  }

  /**
   * D√©marre la reconnaissance vocale
   */
  async startListening(language = 'fr') {
    try {
      if (!this.isInitialized) {
        throw new Error('Service non initialis√©');
      }

      if (this.isListening) {
        console.warn('‚ö†Ô∏è Reconnaissance d√©j√† en cours');
        return false;
      }

      // Mettre √† jour la langue
      this.setLanguage(language);

      if (this.recognition) {
        this.recognition.start();
        return true;
      } else {
        // Mode simulation pour environnements non support√©s
        return this.simulateRecognition();
      }
    } catch (error) {
      console.error('‚ùå Erreur d√©marrage reconnaissance:', error);
      if (this.callbacks.onError) {
        this.callbacks.onError({
          error: 'start_failed',
          message: error.message
        });
      }
      return false;
    }
  }

  /**
   * Arr√™te la reconnaissance vocale
   */
  stopListening() {
    try {
      if (this.recognition && this.isListening) {
        this.recognition.stop();
      }
      this.isListening = false;
      console.log('üõë Reconnaissance vocale arr√™t√©e');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur arr√™t reconnaissance:', error);
      return false;
    }
  }

  /**
   * D√©finit la langue de reconnaissance
   */
  setLanguage(language) {
    const mappedLang = this.languageMapping[language] || language;
    this.currentLanguage = mappedLang;
    
    if (this.recognition) {
      this.recognition.lang = mappedLang;
    }
    
    console.log(`üåê Langue de reconnaissance: ${language} ‚Üí ${mappedLang}`);
  }

  /**
   * D√©finit les callbacks d'√©v√©nements
   */
  setCallbacks(callbacks) {
    this.callbacks = { ...this.callbacks, ...callbacks };
  }

  /**
   * Simulation de reconnaissance pour tests
   */
  async simulateRecognition() {
    console.log('üé≠ Simulation de reconnaissance vocale');
    
    if (this.callbacks.onStart) {
      this.callbacks.onStart();
    }

    // Simulation avec d√©lai
    setTimeout(() => {
      const simulatedResults = {
        'fr': 'Bonjour, comment allez-vous ?',
        'es': 'Hola, ¬øc√≥mo est√° usted?',
        'en': 'Hello, how are you?',
        'yua': 'Ba\'ax ka wa\'alik',
        'qu': 'Rimaykullayki',
        'gn': 'Mba\'√©ichapa'
      };

      const language = Object.keys(this.languageMapping).find(
        lang => this.languageMapping[lang] === this.currentLanguage
      ) || 'fr';

      const transcript = simulatedResults[language] || simulatedResults.fr;

      if (this.callbacks.onResult) {
        this.callbacks.onResult({
          transcript: transcript,
          confidence: 0.95,
          language: this.currentLanguage,
          timestamp: new Date().toISOString(),
          simulated: true
        });
      }

      if (this.callbacks.onEnd) {
        this.callbacks.onEnd();
      }
    }, 2000);

    return true;
  }

  /**
   * Obtient un message d'erreur localis√©
   */
  getErrorMessage(errorCode) {
    const errorMessages = {
      'network': 'Erreur r√©seau - v√©rifiez votre connexion',
      'audio-capture': 'Impossible d\'acc√©der au microphone',
      'not-allowed': 'Permission microphone refus√©e',
      'no-speech': 'Aucune parole d√©tect√©e',
      'aborted': 'Reconnaissance interrompue',
      'language-not-supported': 'Langue non support√©e',
      'service-not-allowed': 'Service non autoris√©'
    };

    return errorMessages[errorCode] || `Erreur inconnue: ${errorCode}`;
  }

  /**
   * V√©rifie si la reconnaissance est disponible
   */
  isAvailable() {
    if (typeof window === 'undefined') return false;
    return !!(window.SpeechRecognition || window.webkitSpeechRecognition);
  }

  /**
   * Obtient les langues support√©es
   */
  getSupportedLanguages() {
    return Object.keys(this.languageMapping);
  }

  /**
   * Obtient le statut actuel
   */
  getStatus() {
    return {
      initialized: this.isInitialized,
      listening: this.isListening,
      currentLanguage: this.currentLanguage,
      available: this.isAvailable(),
      supportedLanguages: this.getSupportedLanguages()
    };
  }

  /**
   * Test de fonctionnalit√©
   */
  async testRecognition() {
    try {
      console.log('üß™ Test de reconnaissance vocale...');
      
      const testResult = {
        available: this.isAvailable(),
        initialized: this.isInitialized,
        languages: this.getSupportedLanguages(),
        timestamp: new Date().toISOString()
      };

      if (this.isAvailable()) {
        // Test rapide
        await this.simulateRecognition();
        testResult.testPassed = true;
      } else {
        testResult.testPassed = false;
        testResult.reason = 'Speech Recognition non support√©';
      }

      console.log('‚úÖ Test de reconnaissance termin√©:', testResult);
      return testResult;
    } catch (error) {
      console.error('‚ùå √âchec test reconnaissance:', error);
      return {
        available: false,
        initialized: false,
        testPassed: false,
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }
}

// Instance globale
const nativeSpeechRecognition = new NativeSpeechRecognitionWebService();

export default nativeSpeechRecognition;
