/**
 * üåç TEST DES LANGUES IMPORTANTES MANQUANTES
 * Validation des langues majeures ajout√©es : Portugais, Russe, Ourdou, Swahili, etc.
 */

import axios from 'axios';

const API_BASE = 'http://localhost:3001';

// Tests pour les langues importantes ajout√©es
const NOUVELLES_LANGUES_TESTS = [
  // === LANGUES CRITIQUES MANQUANTES ===
  {
    category: "üö® Langues Critiques (Portugais, Russe)",
    tests: [
      { text: "hello", from: "en", to: "pt", expected_success: true, note: "Portugais - 260M locuteurs" },
      { text: "hello", from: "en", to: "ru", expected_success: true, note: "Russe - 258M locuteurs" },
      { text: "computer", from: "en", to: "pt", expected_api: "google", note: "Test Google Portugais" },
      { text: "computer", from: "en", to: "ru", expected_api: "google", note: "Test Google Russe" },
      { text: "thank you", from: "en", to: "pt", expected_api: "deepl", note: "Test DeepL Portugais" },
      { text: "thank you", from: "en", to: "ru", expected_api: "deepl", note: "Test DeepL Russe" }
    ]
  },
  
  // === LANGUES IMPORTANTES SUPPL√âMENTAIRES ===
  {
    category: "üåç Langues Importantes (Ourdou, Swahili, etc.)",
    tests: [
      { text: "hello", from: "en", to: "ur", expected_success: true, note: "Ourdou - 170M locuteurs (Pakistan)" },
      { text: "hello", from: "en", to: "sw", expected_success: true, note: "Swahili - 150M locuteurs (Afrique Est)" },
      { text: "hello", from: "en", to: "vi", expected_success: true, note: "Vietnamien - 85M locuteurs" },
      { text: "hello", from: "en", to: "th", expected_success: true, note: "Tha√Ø - 60M locuteurs" },
      { text: "hello", from: "en", to: "tl", expected_success: true, note: "Tagalog - 45M locuteurs (Philippines)" },
      { text: "hello", from: "en", to: "he", expected_success: true, note: "H√©breu - 9M locuteurs (Isra√´l)" }
    ]
  },
  
  // === TESTS COUVERTURE GOOGLE ===
  {
    category: "üåê Couverture Google Translate √âtendue",
    tests: [
      { text: "computer", from: "en", to: "ur", expected_api: "google", note: "Google Ourdou" },
      { text: "computer", from: "en", to: "sw", expected_api: "google", note: "Google Swahili" },
      { text: "computer", from: "en", to: "vi", expected_api: "google", note: "Google Vietnamien" },
      { text: "computer", from: "en", to: "th", expected_api: "google", note: "Google Tha√Ø" },
      { text: "computer", from: "en", to: "tl", expected_api: "google", note: "Google Tagalog" },
      { text: "computer", from: "en", to: "he", expected_api: "google", note: "Google H√©breu" }
    ]
  },
  
  // === TESTS COUVERTURE DEEPL ===
  {
    category: "üèÜ Couverture DeepL Premium",
    tests: [
      { text: "good morning", from: "en", to: "pt", expected_api: "deepl", note: "DeepL Portugais" },
      { text: "good morning", from: "en", to: "ru", expected_api: "deepl", note: "DeepL Russe" },
      { text: "good morning", from: "en", to: "id", expected_api: "deepl", note: "DeepL Indon√©sien" },
      { text: "good morning", from: "en", to: "tr", expected_api: "deepl", note: "DeepL Turc" }
    ]
  },
  
  // === TESTS IMPACT G√âOGRAPHIQUE ===
  {
    category: "üåç Impact G√©ographique Global",
    tests: [
      // Br√©sil
      { text: "family", from: "en", to: "pt", expected_success: true, note: "Br√©sil - 215M (5√®me √©conomie)" },
      // Russie/Ex-URSS
      { text: "family", from: "en", to: "ru", expected_success: true, note: "Russie/Ex-URSS - Immense territoire" },
      // Pakistan
      { text: "family", from: "en", to: "ur", expected_success: true, note: "Pakistan - 220M habitants" },
      // Afrique de l'Est
      { text: "family", from: "en", to: "sw", expected_success: true, note: "Kenya/Tanzanie - Croissance rapide" },
      // Asie du Sud-Est
      { text: "family", from: "en", to: "vi", expected_success: true, note: "Vietnam - √âconomie √©mergente" },
      { text: "family", from: "en", to: "th", expected_success: true, note: "Tha√Ølande - Hub ASEAN" },
      { text: "family", from: "en", to: "tl", expected_success: true, note: "Philippines - 110M habitants" }
    ]
  }
];

// Fonction de test de traduction
async function testTranslation(testCase) {
  try {
    const response = await axios.post(`${API_BASE}/api/translate`, {
      text: testCase.text,
      from: testCase.from,
      to: testCase.to
    }, {
      timeout: 5000,
      validateStatus: function (status) {
        return status < 600;
      }
    });
    
    return {
      success: true,
      status: response.status,
      data: response.data
    };
  } catch (error) {
    return {
      success: false,
      error: error.message,
      status: error.response?.status || 0
    };
  }
}

// Fonction principale de validation
async function runLanguageExpansionTests() {
  console.log('üåç === VALIDATION DES LANGUES IMPORTANTES AJOUT√âES ===');
  console.log(`‚è∞ D√©marrage: ${new Date().toLocaleString()}`);
  console.log('');
  
  let totalTests = 0;
  let passedTests = 0;
  let failedTests = [];
  let criticalFailures = 0;
  
  for (const category of NOUVELLES_LANGUES_TESTS) {
    console.log(`üìä CAT√âGORIE: ${category.category}`);
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    
    for (const test of category.tests) {
      totalTests++;
      console.log(`üîÑ Test: "${test.text}" (${test.from} ‚Üí ${test.to})`);
      if (test.note) {
        console.log(`   üí° ${test.note}`);
      }
      
      const result = await testTranslation(test);
      
      if (!result.success) {
        console.log(`   ‚ùå √âchec r√©seau: ${result.error}`);
        failedTests.push({ test, error: result.error, category: category.category });
        if (category.category.includes('üö®')) criticalFailures++;
        continue;
      }
      
      // V√©rification des attentes
      let testPassed = true;
      let errorMessages = [];
      
      if (result.status !== 200) {
        testPassed = false;
        errorMessages.push(`Status HTTP incorrect: ${result.status}`);
      }
      
      if (test.expected_success !== false && result.data.success !== true) {
        testPassed = false;
        errorMessages.push("Traduction √©chou√©e");
      }
      
      // V√©rification API utilis√©e
      if (test.expected_api && result.data.api !== test.expected_api) {
        testPassed = false;
        errorMessages.push(`API attendue: ${test.expected_api}, re√ßue: ${result.data.api}`);
      }
      
      if (testPassed) {
        passedTests++;
        console.log(`   ‚úÖ Test r√©ussi`);
        if (result.data.translation) {
          console.log(`   ‚Üí Traduction: "${result.data.translation}"`);
        }
        if (result.data.api) {
          console.log(`   ü§ñ API: ${result.data.api} (confiance: ${result.data.confidence})`);
        }
        if (category.category.includes('üö®')) {
          console.log(`   üî• SUCC√àS CRITIQUE !`);
        }
      } else {
        console.log(`   ‚ùå Test √©chou√©:`);
        errorMessages.forEach(msg => console.log(`      ‚Ä¢ ${msg}`));
        failedTests.push({ test, errorMessages, category: category.category, result: result.data });
        if (category.category.includes('üö®')) criticalFailures++;
      }
      
      console.log('');
    }
  }
  
  // Rapport final
  console.log('üìä RAPPORT DE VALIDATION DES LANGUES IMPORTANTES');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`‚úÖ Tests r√©ussis: ${passedTests}/${totalTests} (${((passedTests/totalTests)*100).toFixed(1)}%)`);
  console.log(`‚ùå Tests √©chou√©s: ${failedTests.length}/${totalTests}`);
  console.log(`üö® √âchecs critiques: ${criticalFailures}/${totalTests}`);
  
  // Analyse de l'impact
  console.log('');
  console.log('üåç NOUVELLES LANGUES AJOUT√âES');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('‚úÖ üáßüá∑üáµüáπ Portugais (pt) ‚Üí 260M locuteurs (Br√©sil, Portugal, Afrique)');
  console.log('‚úÖ üá∑üá∫ Russe (ru) ‚Üí 258M locuteurs (Russie, Ex-URSS)');
  console.log('‚úÖ üáµüá∞ Ourdou (ur) ‚Üí 170M locuteurs (Pakistan, Inde)');
  console.log('‚úÖ üá∞üá™üáπüáø Swahili (sw) ‚Üí 150M locuteurs (Afrique de l\'Est)');
  console.log('‚úÖ üáªüá≥ Vietnamien (vi) ‚Üí 85M locuteurs (Vietnam)');
  console.log('‚úÖ üáπüá≠ Tha√Ø (th) ‚Üí 60M locuteurs (Tha√Ølande)');
  console.log('‚úÖ üáµüá≠ Tagalog (tl) ‚Üí 45M locuteurs (Philippines)');
  console.log('‚úÖ üáÆüá± H√©breu (he) ‚Üí 9M locuteurs (Isra√´l)');
  
  console.log('');
  console.log('üìà IMPACT ESTIM√â');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üìä Nouvelles langues: +8 langues importantes');
  console.log('üë• Nouveaux utilisateurs potentiels: +1.037 MILLIARD');
  console.log('üåç Couverture g√©ographique: +7 r√©gions majeures');
  console.log('üèÜ APIs support√©es: DeepL (pt, ru) + Google (toutes)');
  
  if (failedTests.length > 0) {
    console.log('');
    console.log('üíî D√âTAILS DES √âCHECS');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    failedTests.forEach((failure, index) => {
      console.log(`${index + 1}. [${failure.category}] "${failure.test.text}" (${failure.test.from} ‚Üí ${failure.test.to})`);
      if (failure.test.note) {
        console.log(`   üí° ${failure.test.note}`);
      }
      if (failure.errorMessages) {
        failure.errorMessages.forEach(msg => console.log(`   ‚Ä¢ ${msg}`));
      } else {
        console.log(`   ‚Ä¢ ${failure.error}`);
      }
    });
  }
  
  console.log('');
  const status = criticalFailures === 0 ? 'SUCC√àS CRITIQUE' : '√âCHECS CRITIQUES D√âTECT√âS';
  const emoji = criticalFailures === 0 ? 'üéâ' : 'üö®';
  console.log(`üèÅ Validation termin√©e: ${status} ${emoji}`);
  
  return {
    total: totalTests,
    passed: passedTests,
    failed: failedTests.length,
    critical_failures: criticalFailures,
    success_rate: (passedTests/totalTests)*100,
    status: status
  };
}

// Tests de sant√© du serveur
async function testServerHealth() {
  try {
    const response = await axios.get(`${API_BASE}/api/health`, { timeout: 2000 });
    return response.status === 200;
  } catch (error) {
    return false;
  }
}

// Point d'entr√©e principal
async function main() {
  console.log('üîç V√©rification de l\'√©tat du serveur...');
  
  const serverHealthy = await testServerHealth();
  if (!serverHealthy) {
    console.log('‚ùå Serveur non disponible sur http://localhost:3001');
    console.log('üí° Assurez-vous que le serveur est d√©marr√© avec: node api-server-enhanced.js');
    process.exit(1);
  }
  
  console.log('‚úÖ Serveur op√©rationnel');
  console.log('');
  
  await runLanguageExpansionTests();
}

// Ex√©cution
main().catch(error => {
  console.error('‚ùå Erreur lors des tests:', error);
  process.exit(1);
});

export { runLanguageExpansionTests, testTranslation };
